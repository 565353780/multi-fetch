<?xml version="1.0"?>

<launch>

  <arg name="robot_idx" default="0" />
  <arg name="load_robot_description" default="true"/>
  <arg name="robot_description" default="robot_description"/>

  <group ns="fetch_$(arg robot_idx)">
    <param if="$(arg load_robot_description)" name="$(arg robot_description)" textfile="$(find fetch_gazebo)/robots/fetch.urdf"/>

    <!-- The semantic description that corresponds to the URDF -->
    <param name="$(arg robot_description)_semantic" textfile="$(find fetch_moveit_config)/config/fetch.srdf" />
   
    <!-- Load updated joint limits (override information from URDF) -->
    <group ns="$(arg robot_description)_planning">
      <rosparam command="load" file="$(find fetch_moveit_config)/config/joint_limits.yaml"/>
    </group>

    <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
    <group ns="$(arg robot_description)_kinematics">
      <rosparam command="load" file="$(find fetch_moveit_config)/config/kinematics.yaml"/>
    </group>
    
    <!-- GDB Debug Option -->
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value="" />
    <arg     if="$(arg debug)" name="launch_prefix"
       value="gdb -x $(find fetch_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

    <!-- Verbose Mode Option -->
    <arg name="info" default="$(arg debug)" />
    <arg unless="$(arg info)" name="command_args" value="" />
    <arg     if="$(arg info)" name="command_args" value="--debug" />

    <!-- move_group settings -->
    <arg name="allow_trajectory_execution" default="true"/>
    <arg name="allow_active_sensing" default="false"/>
    <arg name="moveit_octomap_sensor_params_file" default="$(find fetch_moveit_config)/config/sensors.yaml" />
    <arg name="fake_execution" default="false"/>
    <arg name="max_safe_path_cost" default="1"/>
    <arg name="jiggle_fraction" default="0.05" />
    <arg name="publish_monitored_planning_scene" default="true"/>
    <arg name="pipeline" default="$(optenv PLANNING_PIPELINE ompl)" />

    <!-- Planning Functionality -->
    <include ns="move_group" file="$(find fetch_moveit_config)/launch/planning_pipeline.launch.xml">
      <arg name="pipeline" value="$(arg pipeline)" />
    </include>

    <!-- Trajectory Execution Functionality -->
    <include ns="move_group" file="$(find fetch_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
      <arg name="moveit_manage_controllers" value="true" />
      <arg name="moveit_controller_manager" value="fetch" unless="$(arg fake_execution)"/>
      <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    </include>

    <!-- Sensors Functionality -->
    <rosparam command="delete" param="move_group/sensors" />
    <include ns="move_group" file="$(find fetch_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_active_sensing)">
      <arg name="moveit_sensor_manager" value="fetch" />
      <arg name="moveit_octomap_sensor_params_file" value="$(arg moveit_octomap_sensor_params_file)"/>
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
      <!-- Set the display variable, in case OpenGL code is used internally -->
      <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

      <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
      <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
      <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

      <!-- MoveGroup capabilities to load -->
      <param name="capabilities" value="move_group/MoveGroupCartesianPathService
                move_group/MoveGroupExecuteTrajectoryAction
                move_group/MoveGroupKinematicsService
                move_group/MoveGroupMoveAction
                move_group/MoveGroupPickPlaceAction
                move_group/MoveGroupPlanService
                move_group/MoveGroupQueryPlannersService
                move_group/MoveGroupStateValidationService
                move_group/MoveGroupGetPlanningSceneService
                move_group/ApplyPlanningSceneService
                move_group/ClearOctomapService
                " />

      <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
      <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    </node>
  </group>

</launch>
